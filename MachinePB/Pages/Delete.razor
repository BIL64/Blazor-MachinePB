@page "/delete/{No:int}"
@inject ILogger<Create> Logger
@inject NavigationManager NavManager

<PageTitle>Delete machine</PageTitle>

<h5>Delete machine</h5>

<div>
    <EditForm Model="@machine" OnSubmit="@HandleSubmit">
        <div class="form-group m-md-3">
            Location: @machine.Location
        </div>
        <div class="form-group m-md-3">
            Installation date: @machine.Date
        </div>
        <div class="form-group m-md-3">
            Type: @machine.Type
        </div>
        <div class="form-group m-md-3">
            <NavLink href="fetchdata"><button type="button" class="btn btn-info btn-sm mt-2">REGRET</button></NavLink>&nbsp;
            <button type="submit" class="btn btn-danger btn-sm mt-2" title="Submit changes">DELETE THIS DEVICE</button>
        </div>
    </EditForm>
</div>


@code {

    private Machine machine = new();

    [Inject]
    private IMachClient machClient { get; set; } = default!;

    [Parameter]
    public int No { get; set; }

    public string _Id { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var mach = await machClient.GetAsync();

        if (mach is not null) // Hämtar det id som motsvarar den maskinens nummer.
        {
            foreach (var item in mach)
            {
                if (No == item.Number) _Id = item.Id;
            }
        }

        var machall = await machClient.GetAsync(_Id); // Hämtar maskinen som ska raderas och lägger in allt i machine.

        if (machall is not null)
        {
            machine = machall;
        }
    }

    private async Task HandleSubmit()
    {
        Logger.LogInformation("HandleSubmit called");

        if (machine is null)
        {
            throw new ArgumentNullException(nameof(machine));
        }

        await machClient.RemoveAsync(_Id);
        Auxx.IsEdit = true;
        NavManager.NavigateTo("/fetchdata");
    }
}
